/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 cat2.gltf
*/

import React, { useRef,useState,useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export default function Cat(props) {
  const prevAction = usePrevious(props.action)

  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/cat2.gltf')
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    console.log(actions)
    actions.idle.play()
    actions.blink.play()
  })
useEffect(() => {
  if (prevAction) {
    actions[prevAction].fadeOut(0.1)
    actions[prevAction].stop()
  }
  actions[props.action].play()
  actions[props.action].fadeIn(0.01)

}, [props.action, actions])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="rig">
          <primitive object={nodes.root} />
          <primitive object={nodes['MCH-torsoparent']} />
          <group name="cat002">
            <skinnedMesh name="Cube013" geometry={nodes.Cube013.geometry} material={materials.black} skeleton={nodes.Cube013.skeleton} morphTargetDictionary={nodes.Cube013.morphTargetDictionary} morphTargetInfluences={nodes.Cube013.morphTargetInfluences} />
            <skinnedMesh name="Cube013_1" geometry={nodes.Cube013_1.geometry} material={materials.cat} skeleton={nodes.Cube013_1.skeleton} morphTargetDictionary={nodes.Cube013_1.morphTargetDictionary} morphTargetInfluences={nodes.Cube013_1.morphTargetInfluences} />
            <skinnedMesh name="Cube013_2" geometry={nodes.Cube013_2.geometry} material={materials.pink} skeleton={nodes.Cube013_2.skeleton} morphTargetDictionary={nodes.Cube013_2.morphTargetDictionary} morphTargetInfluences={nodes.Cube013_2.morphTargetInfluences} />
            <skinnedMesh name="Cube013_3" geometry={nodes.Cube013_3.geometry} material={materials.white} skeleton={nodes.Cube013_3.skeleton} morphTargetDictionary={nodes.Cube013_3.morphTargetDictionary} morphTargetInfluences={nodes.Cube013_3.morphTargetInfluences} />
          </group>
        </group>
      </group>
    </group>
  )
}
function usePrevious(value) {
  const ref = useRef()
  useEffect(() => {
    ref.current = value
  })
  return ref.current
}
useGLTF.preload('/cat2.gltf')
